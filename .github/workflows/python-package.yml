name: Build and Release

on:
  push:
    tags:
      - "*"
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build-windows:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Setup Python and venv
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          python -m pip install --upgrade pip
          python -m pip install wheel pyinstaller
          pip install -r requirements.txt

      - name: Build Windows Executable
        run: |
          .\venv\Scripts\activate
          pyinstaller --noconfirm KickViewerBOT.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/KickViewerBOT.exe

  build-macos:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup Python and venv
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          pip install -r requirements.txt

      - name: Build MacOS App
        run: |
          source venv/bin/activate
          pyinstaller --noconfirm KickViewerBOT-macOS.spec

      - name: zip the app
        run: |
          cd dist
          zip -r KickViewerBOT-MacOS.zip KickViewerBOT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/KickViewerBOT-MacOS.zip

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Extract tag name
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          # Check if tag contains beta, alpha, rc, or preview
          if [[ "${GITHUB_REF#refs/tags/}" =~ (beta|alpha|rc|preview) ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}

          body: |
            # 🚀 KickViewerBOT Beta V3 - Major Architecture Upgrade

            ## 🏗️ Revolutionary Architecture Redesign

            **Beta V3 introduces a complete architectural overhaul** that separates the frontend and backend into distinct services, bringing enterprise-grade reliability and developer flexibility to KickViewerBOT!

            ### ⚡ New Client-Server Architecture

            **What Changed:**
            - **Frontend:** Now runs as a standalone web server (Next.js)
            - **Backend:** Operates as a local service on your PC
            - **Communication:** Real-time WebSocket connection between frontend and backend
            - **Result:** Modern, scalable, and incredibly responsive architecture

            ### 🎯 Why This Matters for You

            **Enhanced Reliability:**
            - 🔒 **More Stable Connections:** WebSocket-based communication ensures consistent real-time updates
            - 🔄 **Auto-Reconnection:** Frontend automatically reconnects if connection drops
            - 📊 **Better Error Handling:** Isolated services mean one component failure doesn't crash the entire app
            - ⚡ **Faster Response Times:** Dedicated server processes improve overall performance

            **Superior Developer Experience:**
            - 🛠️ **Independent Updates:** Frontend and backend can be updated separately
            - 🧪 **Easier Testing:** Each component can be tested in isolation
            - 🚀 **Faster Development:** Hot reload and modern dev tools for quicker iterations
            - 🎨 **Better UI Framework:** Next.js provides cutting-edge web capabilities

            **Future-Proof Foundation:**
            - 📱 **Multi-Platform Ready:** Architecture supports future mobile apps or web dashboard
            - 🌐 **Remote Access Potential:** Foundation for future remote monitoring features
            - 🔌 **Plugin System Ready:** Modular design enables future extensibility
            - 📈 **Scalability:** Can handle more viewers and features without performance degradation

            ### 🔧 Technical Highlights

            **Backend Service:**
            - Python-based local service handling all bot operations
            - WebSocket server on port 8080 for real-time communication
            - Improved proxy management and connection stability
            - Enhanced logging and debugging capabilities

            **Frontend Application:**
            - Next.js 15 with React 18 for modern UI
            - Real-time WebSocket client for instant updates
            - Beautiful glassmorphism design with smooth animations
            - Dark/Light theme support with automatic detection
            - Responsive design for all screen sizes

            **Communication Layer:**
            - Bidirectional WebSocket protocol
            - JSON-based message format for clarity
            - Automatic reconnection with exponential backoff
            - Health monitoring and status indicators

            ### 🎨 User Experience Improvements

            **Visual Enhancements:**
            - ✨ Smooth page transitions and animations
            - 🎯 Real-time stats updates with no lag
            - 📊 Better data visualization
            - 🔔 Smart update notifications (non-intrusive toasts)
            - 🌈 Adaptive theming for better readability

            **Monitoring Features:**
            - 📈 Live viewer count tracking
            - 🔄 Connection status indicators
            - ⚙️ Advanced settings panel
            - 📊 Performance metrics dashboard
            - 🎮 Streamlined bot controls

            ### 🐛 Bug Fixes & Improvements

            - ✅ Fixed connection stability issues
            - ✅ Improved error recovery mechanisms
            - ✅ Enhanced proxy rotation logic
            - ✅ Better memory management
            - ✅ Resolved UI state synchronization issues
            - ✅ Fixed update checker notification persistence

            ### ⚠️ Breaking Changes

            **Important Notes:**
            - This is a **beta release** - please report any issues on GitHub
            - The new architecture requires both frontend and backend to run together

            ---

            ## 📥 Download & Installation

            **This is the biggest update to KickViewerBOT ever!**

            The new architecture provides a solid foundation for years of future improvements while delivering better performance and reliability today.

            ### Getting Started:
            1. Download the appropriate version for your OS
            2. Run the application (both services start automatically)
            3. Access the interface (opens automatically in your browser)
            4. Enjoy the enhanced experience!

            **Need Help?** Check out our [GitHub Issues](https://github.com/H1B0B0/Kick-Viewerbot/issues) or join our community!

            ---

            *Thank you for being part of the KickViewerBOT Beta program! Your feedback helps make this tool better for everyone.* 🙏

          draft: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-build/KickViewerBOT.exe
          asset_name: KickViewerBOT-Windows.exe
          asset_content_type: application/octet-stream

      - name: Upload MacOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-build/KickViewerBOT-MacOS.zip
          asset_name: KickViewerBOT-MacOS.zip
          asset_content_type: application/zip
