name: Build and Release

on:
  push:
    tags:
      - "*"
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build-windows:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Setup Python and venv
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          python -m pip install --upgrade pip
          python -m pip install wheel pyinstaller
          pip install -r requirements.txt

      - name: Build Windows Executable
        run: |
          .\venv\Scripts\activate
          pyinstaller --noconfirm KickViewerBOT.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/KickViewerBOT.exe

  build-macos:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup Python and venv
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          pip install -r requirements.txt

      - name: Build MacOS App
        run: |
          source venv/bin/activate
          pyinstaller --noconfirm KickViewerBOT-macOS.spec

      - name: zip the app
        run: |
          cd dist
          zip -r KickViewerBOT-MacOS.zip KickViewerBOT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/KickViewerBOT-MacOS.zip

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Extract tag name
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          # Check if tag contains beta, alpha, rc, or preview
          if [[ "${GITHUB_REF#refs/tags/}" =~ (beta|alpha|rc|preview) ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}

          body: |
            # 🚀 KickViewerBOT – Smarter, Simpler, More Reliable!

            ## ✨ What’s New in This Release?

            ### 🔥 Next-Level Connectivity & User Experience

            - **Automatic Port Discovery:** No more port conflicts! The backend now scans and selects an available port for you. The frontend instantly detects and connects—no manual setup, no headaches.
            - **Seamless Frontend-Backend Sync:** Both parts of the app share a single, smart configuration. You can move, restart, or run multiple instances—KickViewerBOT adapts instantly.
            - **Crystal-Clear Error Messages:** If a port is busy, you get a friendly message and a clear solution. No more cryptic errors!
            - **Zero Config, Zero Stress:** All connection URLs and ports are generated and synchronized automatically. Just launch and go!
            - **Rock-Solid Reliability:** Even if your environment changes, KickViewerBOT keeps running and reconnects without user intervention.

            ### 🔧 Under the Hood

            - **Unified Port Management:** Both backend and frontend use a shared config for all connection logic. No more mismatches or manual edits.
            - **Smarter Startup:** The backend tries a list of recommended ports and picks the first available. The frontend scans the same list, so you always connect on the first try.
            - **Enhanced Logging:** Startup and error logs are now clear, actionable, and user-friendly.

            ### 🔍 Why You’ll Love This Update

            - **Plug & Play:** Download, run, and you’re online—no technical skills required.
            - **No More “Port Already in Use” Errors:** The app handles everything for you, even if you have other services running.
            - **Future-Proof:** This foundation makes future updates, remote access, and multi-instance support a breeze.

            ---

            ## 🐛 Bug Fixes & Improvements

            - Improved connection stability and error handling
            - Automatic frontend-backend sync for all connection settings
            - Clearer logs and user feedback on startup
            - Unified configuration for easier maintenance

            ---

            ## 📥 How to Get Started

            1. Download the version for your OS
            2. Run the app (both services start automatically)
            3. The interface opens in your browser—no setup required!
            4. Enjoy a smoother, smarter KickViewerBOT experience 🚀

            **Need help?** [Open an issue](https://github.com/H1B0B0/Kick-Viewerbot/issues) or join our community!

            ---

            *Thank you for supporting KickViewerBOT! Your feedback drives every improvement.* 🙏

          draft: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-build/KickViewerBOT.exe
          asset_name: KickViewerBOT-Windows.exe
          asset_content_type: application/octet-stream

      - name: Upload MacOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-build/KickViewerBOT-MacOS.zip
          asset_name: KickViewerBOT-MacOS.zip
          asset_content_type: application/zip
